[alias]

# View abbreviated SHA, description, and history graph of the latest 20 commits
l = log --all --graph --abbrev-commit --decorate --format=oneline
l1 = log --all --graph --abbrev-commit --decorate --format=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an (%G?)>%Creset'
l2 = log --all --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)'
l3 = log --all --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
l4 = log --all --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset)%n''          %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)'

# View the current working tree status
s = status

# Show the diff between the latest commit and the current state
d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

# `git di $number` shows the diff between the state `$number` revisions ago and the current state
di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

# Pull in remote changes for the current repository and all its submodules
p = !"git pull --recurse-submodules"

# Get the current branch name (not so useful in itself, but used in
# other aliases)
branch-name = !git rev-parse --abbrev-ref HEAD

# Push the current branch to the remote "origin", set it to track
# the upstream branch, and display the URL to use to submit a PR if in a
# GitHub-backed repository
publish = !sh -c 'git push -u origin $(git branch-name)' -

# Checkout a pull request from origin (of a github repository)
pr = !"pr() { git fetch origin pull/$1/head:pr-$1; git checkout pr-$1; }; pr"

# Clone a repository including all submodules
c = clone --recursive

# Add in patch mode
ap = add --patch

# Commit all changes
ca = !git add -A && git commit -av

# Switch to a branch, creating it if necessary
go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

# Show verbose output about tags, branches or remotes
tags = tag -l
branches = branch -a
remotes = remote -v

# Amend the currently staged files to the latest commit
amend = commit --amend --reuse-message=HEAD

# Credit an author on the latest commit
credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

# Interactive rebase with the given number of latest commits
reb = "!r() { git rebase -i HEAD~$1; }; r"

# Find branches containing commit
fb = "!f() { git branch -a --contains $1; }; f"

# Find tags containing commit
ft = "!f() { git describe --always --contains $1; }; f"

# Find commits by source code
fc = "!f() { git log --pretty=format:'%C(yellow)%h	%Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

# Find commits by commit message
fm = "!f() { git log --pretty=format:'%C(yellow)%h	%Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

# Remove branches that have already been merged with the default branch
# a.k.a. ‘delete merged’
dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d; git remote -v update -p"

# List contributors with number of commits
contributors = shortlog --summary --numbered

unreleased = "!f() { git fetch --tags && git diff $(git tag | tail -n 1); }; f"
up = "!f() { git pull origin $(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@') && git remote prune origin && git submodule update --init --recursive; }; f"
undo = !git reset HEAD~1 --mixed
undo-amended = !git reset --soft HEAD@{1}
top = !git log --format=format:%an | sort | uniq -c | sort -r | head -n 20

# from trevor bramble https://twitter.com/TrevorBramble/status/774292970681937920
alias=!git config -l | grep ^alias | cut -c 7- | sort

[apply]

# Detect whitespace errors when applying a patch
whitespace = fix

[core]

# Use custom `.gitignore` and `.gitattributes`
excludesfile = ~/.gitignore
attributesfile = ~/.gitattributes

hooksPath = ~/.git-hooks

# Treat spaces before tabs and all kinds of trailing whitespace as an error
# [default] trailing-space: looks for spaces at the end of a line
# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
whitespace = space-before-tab,-indent-with-non-tab,trailing-space

# Make `git rebase` safer on OS X
# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
trustctime = false
editor = vim

[color]

# Use colors in Git commands that are capable of colored output when
# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
ui = auto

[color "branch"]

current = yellow reverse
local = yellow
remote = green

[color "diff"]

meta = yellow bold
frag = magenta bold # line info
old = red           # deletions
new = green         # additions

[color "status"]

added = yellow
changed = green
untracked = cyan

[diff]

# Detect copies as well as renames
renames = copies

[help]

# Automatically correct and execute mistyped commands
autocorrect = 1

[merge]

# Include summaries of merged commits in newly created merge commit messages
log = true

[pull]
# Allow fast-forward pulls only
ff = only


[push]
# change to maching for machines with older versions of git 1.x.x
default = simple

[url "git@github.com:"]

pushInsteadOf = https://github.com/
pushInsteadOf = "github:"
pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

insteadOf = "github:"

[url "git@gist.github.com:"]

insteadOf = "gst:"
pushInsteadOf = "gist:"
pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

insteadOf = "gist:"

# Uncomment if you want fetch to also get all github pull requests, this is rather
# large on big repos.
#[remote "origin"]
#fetch = +refs/pull/*/head:refs/remotes/origin/pull/*

[commit]
	gpgsign = false

[user]
	name = Marco Ferrari
	email = ferrari.marco@gmail.com

[github]
	user = ferrarimarco

[gerrit]
	createChangeId = false
